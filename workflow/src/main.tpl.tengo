wf := import("@platforma-sdk/workflow-tengo:workflow")
assets:= import("@platforma-sdk/workflow-tengo:assets")
render := import("@platforma-sdk/workflow-tengo:render")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")

runWilcoxonTpl := assets.importTemplate(":runWilcoxon")

wf.prepare(func(args){
	
	metaRefs := {}

	i := 0
	for metaRef in args.covariateRefs {
		metaRefs["metaRef" + i ] = wf.resolve(metaRef, { errIfMissing: true })
		i = i + 1
	}

	return {
		resolvedInput: wf.resolve(args.countsRef, { errIfMissing: true }),
		resolvedContrastFactor: wf.resolve(args.contrastFactor),
		metaRefs: metaRefs 
	}
})

wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()
	rawCounts := args.resolvedInput
	inputSpec := rawCounts.spec
	species := inputSpec.domain["pl7.app/species"]

	contrastFactor := args.resolvedContrastFactor
	contrastFactorName := contrastFactor.spec.annotations["pl7.app/label"]
	numerators := args.numerators
	denominator := args.denominator
	pAdjThreshold := args.pAdjThreshold
	log2FCThreshold := args.log2FCThreshold

	// Set default conversion memory and CPU
	defaultConvMem := "16GiB"
	defaultConvCpu := 1

	covariates := []
	for _, v in args.metaRefs {
		covariates = append(covariates, v)
	}

	csvCovariates := xsv.exportFrame(covariates, "csv", { mem: defaultConvMem, cpu: defaultConvCpu })

	runWilcoxon := render.create(runWilcoxonTpl, {
		rawCounts: rawCounts,
		csvCovariates: csvCovariates,
		inputSpec: inputSpec,
		species: species,
		numerators: numerators,
		contrastFactorName: contrastFactorName,
		params: {
			denominator: denominator,
			pAdjThreshold: pAdjThreshold,
			log2FCThreshold: log2FCThreshold,
			blockId: blockId
		}
	})

	topTablePf := runWilcoxon.output("topTablePf", 24 * 60 * 60 * 1000)
	topTableFilteredPf := runWilcoxon.output("topTableFilteredPf", 24 * 60 * 60 * 1000)

	exports := {
		log2foldchange: runWilcoxon.output("log2foldchange", 24 * 60 * 60 * 1000),
		regulationDirection: runWilcoxon.output("regulationDirection", 24 * 60 * 60 * 1000)
	}
	
	return {
		outputs: {
			topTablePf: topTablePf,
			topTableFilteredPf: topTableFilteredPf
		},
		exports: exports
	}
})

