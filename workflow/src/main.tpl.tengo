wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")

pfTopTableConv := import(":pf-top-table-conv")
pfDEGConv := import(":pf-DEG-conv")
// pfBoxplotConv := import(":pf-boxplot-conv")
// pfStackedBarConv := import(":pf-stacked-bar-conv")

wf.prepare(func(args){
	
	metaRefs := {}

	i := 0
	for metaRef in args.covariateRefs {
		metaRefs["metaRef" + i ] = wf.resolve(metaRef, { errIfMissing: true })
		i = i + 1
	}

	return {
		resolvedInput: wf.resolve(args.countsRef, { errIfMissing: true }),
		resolvedContrastFactor: wf.resolve(args.contrastFactor),
		metaRefs: metaRefs 
	}
})

wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()
	rawCounts := args.resolvedInput
	inputSpec := rawCounts.spec
	species := inputSpec.domain["pl7.app/species"]

	contrastFactor := args.resolvedContrastFactor
	contrastFactorName := contrastFactor.spec.annotations["pl7.app/label"]
	numerator := args.numerator
	denominator := args.denominator
	pAdjThreshold := args.pAdjThreshold
	log2FCThreshold := args.log2FCThreshold

	covariates := []
	for _, v in args.metaRefs {
		covariates = append(covariates, v)
	}

	// clusterAnnotation := args.resolvedClusterAnnotation
	// clusterColumn := clusterAnnotation.spec.annotations["pl7.app/label"]
	
	// csvClusters := xsv.exportFrame([clusterAnnotation], "csv", {})

	// Set default conversion memory and CPU
	defaultConvMem := "16GiB" // @TODO: set based on the size of the input
	defaultConvCpu := 1       // @TODO: set based on the size of the input

	csvCovariates := xsv.exportFrame(covariates, "csv", { mem: defaultConvMem, cpu: defaultConvCpu })
	csvCounts := xsv.exportFrame([rawCounts], "csv", { mem: defaultConvMem, cpu: defaultConvCpu })

	testWilcoxon := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.sc-differential-expression.software:run-deWilcoxon")).
		mem("16GiB").
		cpu(1).
		addFile("metadata.csv", csvCovariates).
		addFile("counts.csv", csvCounts).
		arg("--expr").arg("counts.csv").
		arg("--meta").arg("metadata.csv").
		arg("--group1").arg(string(numerator)).
		arg("--group2").arg(string(denominator)).
		arg("--condition_col").arg(string(contrastFactorName)).
		arg("--output").arg("topTable.csv").
		arg("--padj_cutoff").arg(string(pAdjThreshold)).
		arg("--logfc_cutoff").arg(string(log2FCThreshold)).
		saveFile("topTable.csv").
		saveFile("topTable_filtered.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	topTableImportParams := pfTopTableConv.getColumns(blockId, species, log2FCThreshold, pAdjThreshold)
	// Threshold annotated topTablePf (but not filtered)
	topTablePf := xsv.importFile(testWilcoxon.getFile("topTable.csv"), "csv", topTableImportParams, { mem: defaultConvMem, cpu: defaultConvCpu })
	// Filtered topTablePf for main table
	topTableFilteredPf := xsv.importFile(testWilcoxon.getFile("topTable_filtered.csv"), "csv", topTableImportParams, { mem: defaultConvMem, cpu: defaultConvCpu })

	// Construct exports for functional analysis
	DEGImportParams := pfDEGConv.getColumns(blockId, species)
	DEGPf := xsv.importFile(testWilcoxon.getFile("topTable_filtered.csv"), "csv", DEGImportParams, { mem: defaultConvMem, cpu: defaultConvCpu })

	// Create informative label with relevant differential expression parameters
	pAdjStr := string(pAdjThreshold)
	log2FCStr := string(log2FCThreshold)
	
	// Make trace
	traceLabel := "Differential Expression (" + numerator + " vs " + denominator + ", logfc:" + log2FCStr + ", pval:" + pAdjStr + ")"
	
	trace := pSpec.makeTrace(inputSpec, { type: "milaboratories.sc-differential-expression", importance: 70, label: traceLabel })

	exports := {
		log2foldchange: {
			spec: trace.inject(DEGPf["log2foldchange.spec"]),
			data: DEGPf["log2foldchange.data"]
		},
		regulationDirection: {
			spec: trace.inject(DEGPf["regulationDirection.spec"]),
			data: DEGPf["regulationDirection.data"]
		}
	}

	return {
		outputs: {
			topTablePf: pframes.exportFrame(topTablePf),
			topTableFilteredPf: pframes.exportFrame(topTableFilteredPf)
		},
		exports: exports
	}
})

